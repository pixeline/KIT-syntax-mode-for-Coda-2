<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">

<syntax>
    <head>
        <name>HTML</name>
        <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@"]]></charsintokens>
        <charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@/=!]]></charsincompletion>
        <folding toplevel="3"/>
     </head>
    <states>
        <default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" scope="meta.default" usespellchecking="yes">
            
            <import mode="XML" keywords-only="yes"/>
            <state-link mode="XML" state="Comment"/>
            <state-link mode="XML" state="CDATA"/>
            <state-link mode="XML" state="Doctype"/>
            <state-link mode="XML" state="Escape"/>
            
            <state id="Inline CSS" delimiterState="Tags" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
                <begin>
                    <regex>&lt;[ \t]*(?i)style[^>]*></regex>
                    <autoend>&lt;/style></autoend>
                </begin>
                <end>
                    <regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
                </end>
                	<import mode="CSS"/>
                	
            </state>
            
            <state id="CSS Container" containerState="yes" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" scope="meta.block.css">
				
       			<state-link state="PHP" mode="PHP-HTML" />
				
				<state id="Attribute state" scope="meta.block.attribute">
                    <begin>
                        <string>:</string>
                    </begin>
                    <end>
                        <regex>(;|(?'unwindend'"))</regex>
                    </end>
                    
           			<state-link state="PHP" mode="PHP-HTML" />
                    
                    <state id="CSS Single String" type="string" scope="style.value.string.single">
						<begin>
							<string>'</string>
						</begin>
						<end>
							<regex>(?&lt;!\\)(\\\\)*'</regex>
						</end>
					</state>
					
					<state-link state="CSS Functions" mode="CSS" />
					<import mode="CSS" state="Digits and Colors" keywords-only="yes"/>	
					<import mode="CSS" state="Attribute state" keywords-only="yes"/>
					
                </state>
                 
			</state>
            
            <state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" indent="yes" scope="meta.block.js">
                <begin>
                    <regex>(?:&lt;[ \t]*(?i)script\s*?>)|(?:&lt;[ \t]*(?i)script.+?javascript.*?(?&lt;![-])>)</regex>
                    <autoend>&lt;/script></autoend>
                </begin>
                <end>
                    <regex>(?i)&lt;[ \t]*/[ \t]*script[ \t]*></regex>
                </end>
                <import mode="JavaScript"/>
                
            </state>
            
            <state id="JavaScript Container" containerState="yes" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
				<import mode="JavaScript" keywords-only="yes"/>
				<state-link state="AutodocComment" mode="JavaScript"/>
				<state-link state="Comment" mode="JavaScript"/>
				<state-link state="Regular Expressions" mode="JavaScript"/>
				<state-link state="String" mode="JavaScript"/>
				<state-link state="SingleString" mode="JavaScript"/>
			</state>
            
            <state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" indent="yes" scope="meta.block.js">
                <begin>
                    <regex>(?:&lt;[ \t]*(?i)script\s*?>)|(?:&lt;[ \t]*(?i)script.+?javascript.*?(?&lt;![-])>)</regex>
                    <autoend>&lt;/script></autoend>
                </begin>
                <end>
                    <regex>(?i)&lt;[ \t]*/[ \t]*script[ \t]*></regex>
                </end>
                <import mode="JavaScript"/>
                
            </state>
            
            <state id="Self Closing Tags" foldable="no" scope="markup.tag">
            	<begin>
                    <regex>&lt;[ \t]*(?i)(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)</regex>
                </begin>
                <end>
                    <regex>&gt;</regex>
                </end>
                <import state="Tags"/>
            </state>
            
			<state id="Foldable Tags" containerState="yes" delimiterState="Tags" 
				foldBegin="&lt;[ \t]*(?'xmltagstatename'(?i:(?:a(?:rticle|side|udio))|(?:h(?:ead|eader|tml|\d|group))|(?:b(?:ody|lockquote))|p|pre|a|(?:t(?:able|head|body|foot|h|d|r))|div|(?:f(?:ieldset|orm|ooter))|ul|ol|dl|(?:s(?:ection|elect|ource|cript))|main|nav|ruby|video))\b[\s\S]*(?&lt;![/?])>$" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*>" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
				
				<import mode="XML" keywords-only="yes"/>
                <import keywords-only="yes"/>
				<import/>
			</state>
			
				<!--
	            <state id="Foldable Tags" containerState="yes" delimiterState="Tags" 
			 foldBegin="\A&lt;[ \t]*(?'xmltagstatename'[-:_\.a-zA-Z\d]+)[\s\S]*(?&lt;![/?])>\Z" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*>" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
				
					<import mode="XML" keywords-only="yes"/>
	                <import keywords-only="yes"/>
					<import/>
				</state>
				-->
			<state id="Tags" usespellchecking="no" foldState="Foldable Tags" scope="markup.tag">

            	<begin><regex>&lt;</regex></begin>
            	<end><regex>&gt;</regex></end>
            	
            	<state id="Javascript Actions" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.default" >
					<begin><regex>\b(?i)on[\w]+[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
	                <keywords id="Action Attribute" useforautocomplete="no" scope="markup.tag.attribute.name" highlightInOrder="yes">
						<regex>\b((?i)on[\w-]+)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Action Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string" highlightInOrder="yes">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Action Equals" useforautocomplete="no" scope="markup.tag" highlightInOrder="yes">
						<regex>\b(?i)on[\w-]+([ \t]*=[ \t]*)</regex>
					</keywords>
					
					<import mode="JavaScript" keywords-only="yes"/>
	                <import state="JavaScript Container"/>
            	</state>
            	
            	<state id="Links" type="url" useforautocomplete="no" scope="meta.link">
					<begin><regex>\b(?i)(?:href|src|data-src)[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
					
					<state id="Javascript in Links" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
						<begin><regex>\b[ \t]*(?i)javascript:</regex></begin>
						<end><regex>(?'unwindend'")</regex></end>
						<import mode="JavaScript" keywords-only="yes"/>
	                	<import state="JavaScript Container"/>
					</state>
					
					<keywords id="Link Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\b((?i)href|src|data-src)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Link Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Link Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\b(?i)(?:href|src|data-src)([ \t]*=[ \t]*)</regex>
					</keywords>
					
				</state>
            	
            	<state id="Style CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" scope="meta.block.css" >
					<begin><regex>\b(?i)style[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
					<keywords id="Style Attribute" useforautocomplete="no" scope="markup.tag.attribute.name" highlightInOrder="yes">
						<regex>\b((?i)style)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Style Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string" highlightInOrder="yes">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Style Equals" useforautocomplete="no" scope="markup.tag" highlightInOrder="yes">
						<regex>\b(?i)style([ \t]*=[ \t]*)</regex>
					</keywords>
					
					<import state="Inside curly brackets" mode="CSS" keywords-only="yes"/>
					<import state="CSS Container"/>
            	</state>
            	
               	<state id="Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
				</state>
				
				<state id="Single Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
				</state>
				
				<keywords id="Attributes in Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>\b([\w-]*)(?=[ \t]*=)</regex>
				</keywords>

            </state>
            
        </default>
    </states>
</syntax>

